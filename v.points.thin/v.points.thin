#!/bin/env bash
############################################################################
#
# MODULE:     	v.points.thin
# AUTHOR(S): 	Benjamin Ducke <benducke AT fastmail.fm>
# PURPOSE:		Thinning of point vector maps.
#				This script takes a vector map with points as input and creates
#				a new points vector map, in which only those points are preserved
#				that are located beyond a threshold distance from other points.
#
#				The GRASS standard 'where=' option is supported to limit (or define)
# 				the set of deletion candidate points.
#
#				The computational efficiency of this script is not sufficient for the
#				thinning of large point clouds. Rather, it has been designed for 
#				'semantic' thinning of point distributions, where only certain points
#				should be preserved.
#
# CAVEATS:
#				- Only points with a primary key (GRASS 'cat' column) will be processed.
#				- Input map must contain only points.	
#
# COMPATIBILITY:
#				This script has been written to run under GRASS 8 (and possibly
#				any later version that retains the GRASS 8 syntax for the GRASS
#				commands called by this script).
#
# COPYRIGHT:    (C) 2024 by Benjamin Ducke
#
#               This program is free software under the GNU General Public
#               License (>=v2). Read the file COPYING that comes with GRASS
#               for details.
#
#############################################################################


#
# REQUIRED EXTERNAL PROGRAMS:
# - awk
# - grep
# - echo (on Windows)
# - expr
# - date
# - cut
# - tail
# - wc
#


#%Module
#% description: Systematically thins a points vector map.
#% keywords: vector, points, thinning
#%End


#%Flag
#%  key: i
#%  description: Invert effect of 'where=' option (if given)
#%End


#%Option
#% key: input
#% type: string
#% required: yes
#% multiple: no
#% key_desc: name
#% description: Input (points) vector map
#% gisprompt: old,vector,vector
#%End

#%option G_OPT_V_FIELD
#% key: layer
#%end

#%option G_OPT_DB_WHERE
#% key: where
#%end

#%Option
#% key: dist
#% type: double
#% required: yes
#% multiple: no
#% key_desc: value
#% description: Absolute thinning distance threshold (in map units; must be >= 0.0)
#%End

#%Option
#% key: order
#% type: string
#% required: yes
#% multiple: no
#% key_desc: value
#% options: pkeyasc,pkeydesc,random
#% description: Order of thinning (default: by primary key, asc.)
#% answer: pkeyasc
#%End

#%Option
#% key: output
#% type: string
#% required: yes
#% multiple: no
#% key_desc: name
#% description: Thinned output (points) vector map
#% gisprompt: new,vector,vector
#%End


# System setup: Modify if needed.
if [ -n "${MSYSPATH}" ] ; then
	# "MSYSPATH" was set by the Windows ".bat" script that called
	# this script. It contains the path to the "bin" folder of
	# the local MSYS(2) installation, using Linux style "/" separators
	# but NOT INCLUDING the final path separator, like so:
	# "/c/msys64/usr/bin"
	# That means we are running under MS Windows,
	# and we must make some adjustments to external program calls!
	AWK="${MSYSPATH}/awk.exe"
	CUT="${MSYSPATH}/cut.exe"
	DATE="${MSYSPATH}/date.exe"
	ECHO="${MSYSPATH}/echo.exe"	
	EXPR="${MSYSPATH}/expr.exe"	
	GREP="${MSYSPATH}/grep.exe"
	SORT="${MSYSPATH}/sort.exe"
	TAIL="${MSYSPATH}/tail.exe"
	WC="${MSYSPATH}/wc.exe"
	# Scripted GRASS commands require ".bat" extensions for Windows, or else "sh.exe" won't find them!
	V_DB_ADDCOLUMN="v.db.addcolumn.bat"
	V_DB_ADDTABLE="v.db.addtable.bat"
	# Set filter for line endings for this system:
	IFS_NEWLINE=$'\r\n\b'
else
	AWK="awk"
	CUT="cut"
	DATE="date"
	ECHO="echo"
	EXPR="expr"
	GREP="grep"	
	SORT="sort"
	PKILL="pkill"
	TAIL="tail"
	WC="wc"
	# These are the GRASS commands that are actually Shell/Python scripts.
	# On Linux/macOS they are executed through the shell, just like binaries.
	V_DB_ADDCOLUMN="v.db.addcolumn"
	V_DB_ADDTABLE="v.db.addtable"
	# Set filter for line endings for this system:
	IFS_NEWLINE=$'\n\b'
fi

# Keep a copy of IFS, as it was set before running this script!
IFS_ORIGINAL="$IFS"

# Basic module setup.
MODULE_NAME="v_points_thin" # for prefixing temporary object names
MODULE_NAME_EXEC="v.points.thin" # name as run on the command line
MODULE_VERSION="1.1.0b1"

# Exit status variables.
EXIT_OK=0
EXIT_CTRL_C=1
EXIT_TERMINATED=2
EXIT_ERROR=3


# DBMS backend idiosyncracies
DBMS_LOCKS_REQUIRED=0   # DBMS locking off (will be set later, as required)
DBMS_THREAD_SAFE=0		# Indicates whether the DBMS is thread safe (in the context of this script)
DBMS_INDEX_SUPPORTED=0  # Indicates whether the DBMS supports building an index.
DBMS_PRESERVES_ORDER=0  # Indicates whether the DBMS preserves order of record insertion reliably.
DBMS_FILE_PATH=0		# Indicates whether the DBMS driver uses a file path to specify the location of a database.
DBMS_IDENT_QUOTE='"'	# Quoting character for field/table names that (might) contain spaces
DBMS_BEGIN="BEGIN;"		# Opening statement for an SQL transction; most DBMS should understand "BEGIN;"
DBMS_COMMIT="COMMIT;";	# Closing statement for an SQL transction; most DBMS should understand "COMMIT;"


# Basic sanity checks.
if [ -z "$GISBASE" ] ; then
    "${ECHO}" "ERROR: You must be in GRASS GIS to run this program." 1>&2
    exit ${EXIT_ERROR}
fi

if [ "$1" != "@ARGS_PARSED@" ] ; then
    exec g.parser "$0" "$@"
fi

# Check if we are running under old GRASS 6
GRASS_V6=`g.version -e | "${GREP}" "GRASS 6"`

# Check if we are running under old GRASS 7
GRASS_V7=`g.version -e | "${GREP}" "GRASS 7"`

# Check if we are running under old GRASS 8
GRASS_V8=`g.version -e | "${GREP}" "GRASS 8"`

if [ -n "$GRASS_V6" ] ; then
	g.message -e "This script requires GRASS GIS version 7 or higher."
	exit ${EXIT_ERROR}
fi

# Create prefix for all temporary maps
TMP_PREFIX="tmp_${MODULE_NAME}_`"${ECHO}" $$`_d"

# Names of temporary maps (VECTOR)
TMP_VECT_EXTRACT="${TMP_PREFIX}_v_extract" 			# Feature(s) extracted from input vector map
TMP_VECT_COPY="${TMP_PREFIX}_v_copy" 				# Copy of input map


# FUNCTION
# clean_up: Remove temporary maps, reset region to what it was, etc.
clean_up () {	
	# Feature(s) extracted from input vector map.
	type="vector"
	elem="${TMP_VECT_EXTRACT}"
	found=`g.list type="${type}" | "${GREP}" -c "${elem}"`
	if [ $found -gt 0 ] ; then
		g.remove type="${type}" name="${elem}" -f --q 2>/dev/null
	fi
	elem="${TMP_VECT_COPY}"
	found=`g.list type="${type}" | "${GREP}" -c "${elem}"`
	if [ $found -gt 0 ] ; then
		g.remove type="${type}" name="${elem}" -f --q 2>/dev/null
	fi
}
	

# Make sure we get to clean up!
trap "g.message -i 'Terminated by user (CTRL+C).' ; clean_up ; exit ${EXIT_CTRL_C}" 2 # user interrupt (CTRL+C)


# FUNCTION
# check_error: Check last return status, issue an error message and abort if appropriate.
#
# Arguments:
#
# $1 - Error message to display (mandatory)
# $2 - PID (optional)
#
# At least $1 must be provided (error message) for this function to
# work correctly.
#
# If $2 is also provided, then its value will be interpreted as
# an integer type PID, and a 'kill' command with Signal type '1'
# will be issued to terminate the corresponding job.
#
check_error () {
	if [ ! "$?" -eq "0" ] ; then
		g.message -e "$1"
		if [ -n "${PKILL}" ] && [ -n $2 ] && [ "$2" != "" ] ; then
			# PID passed and "pkill" command available: kill this and all
			# subprocesses!
			clean_up
			g.message -e "Terminating job with PID $2 and all subprocesses."	
			"${PKILL}" --signal 9 -P $2 &
			exit ${EXIT_ERROR}
		else
			clean_up
			exit ${EXIT_ERROR}
		fi		
	fi
}


# FUNCTION
# check_warn: Check last return status, issue a warning message if appropriate.
check_warn () {
	if [ ! "$?" -eq "0" ] ; then
		g.message -w "$1"
	fi
}


# FUNCTION
# exit_error: Display an error message and exit with default error code.
# 
# Arguments:
#
# $1 - Error message to display (mandatory)
# $2 - PID (optional)
#
# At least $1 must be provided (error message) for this function to
# work correctly.
#
# If $2 is also provided, then its value will be interpreted as
# an integer type PID, and a 'kill' command with Signal type '1'
# will be issued to terminate the corresponding job.
#
exit_error () {
	g.message -e "$1"	
	if [ -n $2 ] && [ "$2" != "" ] ; then
	    # PID passed: kill!
	    # Note: The trap set at the beginning of this script will make
	    # sure that all clean-up functions are run.
	    g.message -e "Terminating job with PID $2."
		#kill -s 1 $2
		clean_up
		exit ${EXIT_ERROR}
	else
		clean_up
		exit ${EXIT_ERROR}
	fi	
}


# FUNCTION
# get_tbl_info: Retrieves essential information attribute table's DB connection
#			    connected to a GRASS vector map. The information is read from
#				the output of 'v.info'.
#
#            	This function reads one or two arguments:
#					$1 -- name of GRASS vector map that has the attibute table of interest
#				    $2 -- layer (default="1", if $2 is not provided)
#
#            	This function sets three variables:
#               	attribute_database_driver = GRASS database driver used for the connection
#												(same as used/listed by 'db.connect')
#					attribute_database = the name of the actual DB that stores the table
#					attribute_table = the name of the linked attribute table in the DB
#
#				 It will abort the program if there is a problem with the map and/or its table.            
#
get_tbl_info () {
	
	if [ -n "$2" ] ; then
		cmd=`v.info -e map="${1}" layer="${2}"`
	else
		cmd=`v.info -e map="${1}" layer="1"`
	fi
	check_error "Failed to query vector map '$1' for extended metadata."
	
	# Get DB driver name:
	eval_ws_safe "${cmd}" "attribute_database_driver"
	if [ -z "${EVAL_RESULT}" ] ; then
		exit_error "Failed to retrieve driver of database connection for vector map '1'."
	fi
	attribute_database_driver="${EVAL_RESULT}"
	
	# Get name of connected database:
	eval_ws_safe "${cmd}" "attribute_database"
	if [ -z "${EVAL_RESULT}" ] ; then
		exit_error "Failed to retrieve name of database connection for vector map '$1'."
	fi
	attribute_database="${EVAL_RESULT}"
	
	# Get name of linked table in conntected DB:
	eval_ws_safe "${cmd}" "attribute_table"
	if [ -z "${EVAL_RESULT}" ] ; then
		exit_error "Failed to retrieve name of database table for vector map '1'."
	fi
	attribute_table="${EVAL_RESULT}"
}


# FUNCTION
# eval_ws_safe:  White-space resilient setting of variables from command output.
#                This is useful for many GRASS commands that produce shell style
#				  output (like 'g.region -pg') of the form:
#                   var1=abc
#                   var2=123
#                   ...
#                Pass string with a command's full output as $1.
#                Pass name of a variable to set from output as $2.
#                This function will then grep the _first_ occurrence
#                of the variable name (case sensitive!) from the command output
#                and set it to the value following "=" (equal sign).
#				  As opposed to a simple 'eval', this function is able
#                to correctly set variable values that contain whitespace!
#				  This is also the safer option to use if an 'eval' statement would
#                potentially encounter values with white space for variables other
#			 	  than the target variable.
#                The contents for setting the variable are returend in "EVAL_RESULT".
eval_ws_safe () {
	OLD_IFS_EVAL_WS_SAFE="$IFS"
	# Set list separator to newline and line break characters.
	IFS="${IFS_NEWLINE}"
	# Process (list of) input line(s):
	str=`"${ECHO}" "$1" | "${GREP}" "$2="`
	for i in $str
	do
		IFS="="
		CUR=$i
		for j in $CUR
		do			
			EVAL_RESULT="$j"
		done
	done	
	IFS="$OLD_IFS_EVAL_WS_SAFE"
}


# FUNCTION
# list_len:		Computes the length of a list of values (array).
#				This function takes only one argument:
#				
#				$1 -- a list/array
#
#				REMEMBER to put "$1" in quotes of the list values are separated by whitespace!
#
#				The result will be returned as an integer in the variable LIST_LEN.
#
list_len () {
	
	# IMPORTANT! We change IFS, but save the current value to a local(ly named)
	# variable, so that this will work without clashes from within a caller's
	# loop that also fiddles around with IFS (not uncommon)!
	OLD_IFS_LIST_LEN="$IFS"
	IFS="${IFS_NEWLINE}"
	
	LIST_LEN=0
	for item in $1 ; do
		if [ -n $BASH_VERSION ] ; then
			let LIST_LEN=${LIST_LEN}+1
		else
			LIST_LEN=`"${EXPR}" ${LIST_LEN} + 1`
		fi
	done
	
	# IMPORTANT: Reset IFS!
	IFS="$OLD_IFS_LIST_LEN"
}


# FUNCTION
# list_rand: Creates a new version of a list with randomized order of elements.
#
# 				This function takes one argument:
#				
#				$1 -- a list of values (of any type)
#
#				REMEMBER to pass "$1" in quotes if the list values are separated by whitespace!
#
#				A randomized version of the list in $1 will be returned as $LIST_NEW_RAND.
#
#				This function will use BASH array functions, if available, to speed up things.
#
list_rand () {
	OLD_IFS_LIST_RAND="$IFS"
	IFS="${IFS_NEWLINE}"
	#
	# UNTIL random list is as long as $1:
	#	1. draw random element E from $1
	#	2. IF E is not on random list yet:
	#		- add E to end of random list	
	#		- update length of random list
	#		ELSE: GOTO 1			
	#	3. GOTO 1
	#
	# (Using an array can speed up step 1!)	
	list_len "$1"
	input_list_len=$LIST_LEN
	# Error condition?
	if [ -z $input_list_len ] ; then
		exit_error "Attempted to randomize empty list."
	fi
	# Special case?
	if [ $input_list_len -eq 0 ] ; then
		LIST_NEW_RAND=
		return # Return empty list
	fi
	if [ $input_list_len -eq 1 ] ; then
		LIST_NEW_RAND="$1"
		return # Result contains the same single element that $1 contains
	fi
	
	# Randomize input list.
	PICKLIST=$1 # Picklist starts as a copy of input list
	picklist_len=${input_list_len}
	list_rand_min=0 # Minimum index value of random element that can be drawn from picklist
	list_rand_max=${input_list_len} # Maximum index value of random element that can be drawn from picklist
	rand_list_len=0 # Current length of new list with random elements
	LIST_NEW_RAND= # New randomized list
	g.message -i "Randomizing $LIST_LEN elements:"
	while [ $rand_list_len -lt $input_list_len ] ; do
		rand_int $list_rand_min $list_rand_max # Generate random int index value
		list_get "$PICKLIST" ${RANDINT} ${picklist_len}
		list_item_new="$LIST_ITEM" # Randomly picked candidate element for addition to randomized list
		list_find "$LIST_NEW_RAND" "$list_item_new" # Check if the candidate element is already on the randomized list
		if [ -z "$LIST_ITEM" ] ; then
			# Element value does not yet exist on randomized list: Add it!			
			LIST_NEW_RAND="$LIST_NEW_RAND
$list_item_new"	
			# Reduce pick list by the drawn element:
			COPYLIST=$PICKLIST
			PICKLIST=
			first_pick=0
			for item in $COPYLIST ; do
				if [ "$item" = "$list_item_new" ] && [ ${first_pick} -eq 0 ] ; then
					first_pick=1
				else					
					PICKLIST="$PICKLIST
$item"
				fi				
			done
			picklist_len=`"${EXPR}" ${picklist_len} - 1`
			list_rand_max=${picklist_len}
			# Count up length of random list:
			rand_list_len=`"${EXPR}" ${rand_list_len} + 1`
			g.message -p "${rand_list_len} ${input_list_len} 1"
		else
			g.message -w "Redundant random element draw in 'list_rand()'."
		fi
	done
	return 
	# IMPORTANT: Reset IFS!
	IFS="$OLD_IFS_LIST_RAND"
}


# FUNCTION
# list_find: Attempts to find an item in a list of values.
#
# 				This function takes two arguments:
#				
#				$1 -- a list of values
#				$2 -- the value for which to look in the list
#
#				REMEMBER to put "$1" in quotes if the list values are separated by whitespace!
#
#				If the look-up value exist on the list, then LIST_ITEM is set to that value.
#				Otherwise, LIST_ITEM will be returned as EMPTY.
#
list_find () {	
	# IMPORTANT! We change IFS, but save the current value to a local(ly named)
	# variable, so that this will work without clashes from within a caller
	# caller loop that also fiddles around with IFS (not uncommon)!
	OLD_IFS_LIST_FIND="$IFS"
	IFS="${IFS_NEWLINE}"
	for item in $1 ; do
		if [ "${item}" = "${2}" ] ; then
			# Found match: Return immediately.
			LIST_ITEM="${2}"
			IFS="$OLD_IFS_LIST_FIND"	
			return
		fi
	done
	# Return empty value
	LIST_ITEM=
	# IMPORTANT: Reset IFS!
	IFS="$OLD_IFS_LIST_FIND"
}


# FUNCTION
# list_find_int: Attempts to find an item in a list of integer values.
#				The following MUST be true:			    
#
#				- all items on the list are INTEGER NUMBERS
#
# 				This function takes two arguments:
#				
#				$1 -- a list of integer values
#				$2 -- the integer value for which to look in the list
#
#				REMEMBER to put "$1" in quotes if the list values are separated by whitespace!
#
#				If the look-up value exist on the list, then LIST_ITEM is set to that value.
#				Otherwise, LIST_ITEM will be returned as EMPTY.
#
list_find_int () {	
	# IMPORTANT! We change IFS, but save the current value to a local(ly named)
	# variable, so that this will work without clashes from within a caller
	# caller loop that also fiddles around with IFS (not uncommon)!
	OLD_IFS_LIST_FIND="$IFS"
	IFS="${IFS_NEWLINE}"
	LIST_ITEM=
	for item in $1 ; do
		if [ ${item} -eq ${2} ] ; then
			# Found match: Return immediately.
			LIST_ITEM="${2}"
			IFS="$OLD_IFS_LIST_FIND"	
			return
		fi
	done
	# IMPORTANT: Reset IFS!
	IFS="$OLD_IFS_LIST_FIND"
}


# FUNCTION
# list_find_int_asc: Attempts to find an item in a list of integer values.
#				This function is optimized for the specific case where the following
#			    MUST be true:
#
#				- all items on the list are INTEGER NUMBERS
#				- the list is sorted, in ASCENDING ORDER
#
# 				This function takes two arguments:
#				
#				$1 -- a list of integer values
#				$2 -- the integer value for which to look in the list
#
#				REMEMBER to put "$1" in quotes if the list values are separated by whitespace!
#
#				If the look-up value exist on the list, then LIST_ITEM is set to that value.
#				Otherwise, LIST_ITEM will be returned as EMPTY.
#
list_find_int_asc () {	
	# IMPORTANT! We change IFS, but save the current value to a local(ly named)
	# variable, so that this will work without clashes from within a caller's
	# loop that also fiddles around with IFS (not uncommon)!
	OLD_IFS_LIST_FIND="$IFS"
	IFS="${IFS_NEWLINE}"
	LIST_ITEM=
	for item in $1 ; do
		if [ ${item} -eq ${2} ] ; then
			# Found match: Return immediately.
			LIST_ITEM="${2}"
			IFS="$OLD_IFS_LIST_FIND"	
			return
		fi
		if [ ${item} -gt ${2} ] ; then
			# The current list item is already larger than the look-up value:
			# Further iterations will be pointless, since the list is assumed
			# to be sorted in ascending order: Return immediately with empty result.			
			IFS="$OLD_IFS_LIST_FIND"
			LIST_ITEM=
			return
		fi
	done	
	# IMPORTANT: Reset IFS!
	IFS="$OLD_IFS_LIST_FIND"	
}


# FUNCTION
# list_find_int_desc: Attempts to find an item in a list of integer values.
#				This function is optimized for the specific case where the following
#			    MUST be true:
#
#				- all items on the list are INTEGER NUMBERS
#				- the list is sorted, in DESCENDING ORDER
#
# 				This function takes two arguments:
#				
#				$1 -- a list of integer values
#				$2 -- the integer value for which to look in the list
#
#				REMEMBER to put "$1" in quotes if the list values are separated by whitespace!
#
#				If the look-up value exist on the list, then LIST_ITEM is set to that value.
#				Otherwise, LIST_ITEM will be returned as EMPTY.
#
list_find_int_desc () {	
	# IMPORTANT! We change IFS, but save the current value to a local(ly named)
	# variable, so that this will work without clashes from within a caller's
	# loop that also fiddles around with IFS (not uncommon)!
	OLD_IFS_LIST_FIND="$IFS"
	IFS="${IFS_NEWLINE}"
	LIST_ITEM=
	for item in $1 ; do
		if [ ${item} -eq ${2} ] ; then
			# Found match: Return immediately.
			LIST_ITEM="${2}"
			IFS="$OLD_IFS_LIST_FIND"	
			return
		fi
		if [ ${item} -lt ${2} ] ; then
			# The current list item is already less than the look-up value:
			# Further iterations will be pointless, since the list is assumed
			# to be sorted in descending order: Return immediately with empty result.			
			IFS="$OLD_IFS_LIST_FIND"
			LIST_ITEM=
			return
		fi
	done	
	# IMPORTANT: Reset IFS!
	IFS="$OLD_IFS_LIST_FIND"	
}


# FUNCTION
# list_get:		Retrieves an item from a list of values (array).
# 				This function takes three arguments:
#				
#				$1 -- a list/array
#				$2 -- an integer that is the number of the item to get (0 or larger)
#				$3 -- length of list (int)
#
#				REMEMBER to put "$1" in quotes if the list values are separated by whitespace!
#
#				The requested value will be returned in variable LIST_ITEM.
#				LIST_ITEM can be empty if the list is empty.
#				An error will be thrown if $2 contains an invalid index value.
#
list_get () {
	# IMPORTANT! We change IFS, but save the current value to a local(ly named)
	# variable, so that this will work without clashes from within a caller's
	# loop that also fiddles around with IFS (not uncommon)!
	OLD_IFS_LIST_GET="$IFS"
	IFS="${IFS_NEWLINE}"
	
	LIST_ITEM=
	if [ $2 -lt 0 ] ; then
		exit_error "list_get(): Attempted to read list/array using negative index value."
	fi
	if [ $2 -gt $3 ] ; then
		exit_error "list_get(): Attempted to read list/array using out-of-bounds index value ($2)."
	fi

	cur_list_item=0
	for item in $1 ; do
		LIST_ITEM="${item}"
		if [ ${cur_list_item} -eq $2 ] ; then
			# Got item: Return.
			break
		else
			# Get next item.
			if [ -n $BASH_VERSION ] ; then
				let cur_list_item=${cur_list_item}+1
			else
				cur_list_item=`"${EXPR}" ${cur_list_item} + 1`
			fi
		fi
	done
	
	# IMPORTANT: Reset IFS!
	IFS="$OLD_IFS_LIST_GET"	
}


# FUNCTION
# rand_int: Generates a random integer value between $1 and $2 (both inclusive).
#           Uses GNU awk to do the actual work.
#           Returns result in variable $RANDINT.
rand_int () {
	if [ $1 -gt $2 ] ; then
		exit_error "Random integer generation failed: first argument is larger than second argument."
	fi
	# Special case upper and lower values are identical:
	if [ $1 -eq $2 ] ; then
		RANDINT=$1
		return
	fi
	awk_rseed=`${DATE} +%N`
	RANDINT=`"${AWK}" "BEGIN{rseed=$awk_rseed; srand(rseed); print int(($2-$1)*rand()+0.5)+$1;}"`
}


# FUNCTION
# check_setup: Check system setup (required external programs available?).
check_setup () {	
	
	message="Required program not found or not working as expected: "
	
	# Echo (test first, since the following require a working echo command!)
	prg="${ECHO}"
	result=`"${ECHO}" "1 2 4 3"`
	if [ "$result" != "1 2 4 3" ] ; then
		exit_error "$message ${prg}"
	fi
	
	# The following commands are only tested if they have been defined!
	
	# Awk	
	prg="${AWK}"
	if [ -n "${prg}" ] ; then
		result=`"${ECHO}" "1 2 4 3" | ${prg} '{ print $3 }'`
		if [ $result -ne 4 ] ; then
			exit_error "$message ${prg}"
		fi
	fi
	
	# Cut
	prg="${CUT}"
	if [ -n "${prg}" ] ; then
		result=`"${ECHO}" "1,2,4,3" | ${prg} -f3 -d,`
		if [ $result -ne 4 ] ; then
			exit_error "$message ${prg}"
		fi
	fi
	
	# Date
	prg="${DATE}"
	if [ -n "${prg}" ] ; then
		: $(${prg} -u)
		check_error "${message} '${prg}'."
	fi
	
	# Expr
	prg="${EXPR}"
	if [ -n "${prg}" ] ; then
		result=`${prg} 1 + 3`
		if [ $result -ne 4 ] ; then
			exit_error "$message ${prg}"
		fi
	fi
	
	# Grep
	prg="${GREP}"
	if [ -n "${prg}" ] ; then
		result=`"${ECHO}" "1 2 3 4" | ${prg} "3 4" -c`
		if [ $result -ne 1 ] ; then
			exit_error "$message ${prg}"
		fi
	fi
	
	# Head
	prg="${HEAD}"
	if [ -n "${prg}" ] ; then	
		result=`"${ECHO}" -e "one\ntwo\nfive" | ${prg} -n 1`
		if [ "$result" != "one" ] ; then
			exit_error "$message ${prg}"
		fi
	fi
	
	# Check for multi-threading support.
	# Pkill, Sleep, Wait: Multi-threading support
	if [ -z "${PKILL}" ] || [ -z "${WAIT}" ] || [ -z "${SLEEP}" ] ; then
		# If any of these commands ire missing then we are running on a system (likely Windows)
		# that does not have what it takes for concurrent execution of shell scripts.
		MULTI_THREADING_SUPPORT=
	else
		# In the other case, all three of pkill, wait and sleep must be present!
		#
		# We have pkill command: Let's check that it works!
		# TODO: There seems to be no portable AND safe way of checking
		#       that pkill works. For now, we just trust that it's there
		#		if $PKILL is declared!
		#prg="${PKILL}"
		#: $(${prg} --help)
		#check_error "${message} '${prg}'."
		# We have sleep command: Let's check that it works!
		prg="${SLEEP}"
		: $(${prg} 0.1)
		check_error "${message} '${prg}'."
		# We have wait command: Let's check that it works!
		prg="${WAIT}"
		: $(${prg})
		check_error "${message} '${prg}'."
		# Support for multi-threading exists!
		MULTI_THREADING_SUPPORT="y"
	fi
	
	# Sort
	prg="${SORT}"
	if [ -n "${prg}" ] ; then
		result=`"${ECHO}" "Just one line." | ${prg}`
		check_error "${message} '${prg}'."
	fi
	
	# Tail
	prg="${TAIL}"
	if [ -n "${prg}" ] ; then	
		result=`"${ECHO}" -e "one\ntwo\nfive" | ${prg} -n 1`
		if [ "$result" != "five" ] ; then
			exit_error "$message ${prg}"
		fi
	fi
	
	# Wc
	prg="${WC}"
	if [ -n "${prg}" ] ; then	
		result=`"${ECHO}" "one two five" | ${prg} -w`
		if [ $result -ne 3 ] ; then
			exit_error "$message ${prg}"
		fi
	fi
	
}


# FUNCTION
# get_interpreter: 		Runs a lot of code in an attempt to accurately determine
#						the interpreter that is currently running this script.
#						It is not guaranteed that the interpreter is the same as
#						the login shell or user default shell. Thus, reading typical
#						environment variables is pretty pointless.
#						The code in this function has been taken from:
#						
#						https://www.in-ulm.de/~mascheck/various/whatshell/
#
#						Originally, it was designed to echo the name of the running
#						interpreter to the terminal.
#
#						Within this script it is used to read the interpreter's name
#						into a variable for further analysis:
#
#						interpreter=`get_interpreter`
#						
get_interpreter () {
'echo' +"'\
@ goto dos \
[exit[if {[lsearch -exact [package names] Expect]>=0} {puts expect\ [\
package require Expect]\ (Tcl\ [info patchlevel])} elseif {[lsearch -exact [\
package names] Tk]>=0} {puts wish\ (Tcl\ [info patchlevel],\ Tk\ [package \
require Tk])} else {puts tcl\ [info patchlevel]}]]' >/dev/null ' {\">/dev/null \
">"/dev/null" +"\'";q='''=.q,';q=%[\"
echo ">/dev/null;status=0;@ {status=1};*=(" '$' ");~ $status 1&&{e='"\
"';eval catch $2 ^'&version {eval ''echo <='^ $2 ^'&version''}';exit};e='"\
"';if (eval '{let ''a^~a''} >[2] /dev/null'){e='"\
"';exec echo akanga};eval exec echo rc $2 ^ version;\" > /dev/null
: #;echo possibly pre-Bourne UNIX V1-6 shell;exit
if { bindkey >& /dev/null } then
exec echo $version
else
exec echo csh
endif
: dos
@echo off
cls
echo %OS% %COMSPEC%
goto fin
", unless eval 'printf "perl %vd\n",$^V;exit;'> "/dev/null";eval ': "\'';
=S"'
: 'This script aims at recognizing all Bourne compatible shells.
   Emphasis is on shells without any version variables.
   Please comment to mascheck@in-ulm.de'
: '$Id: whatshell.sh,v 1.26 2018/02/18 23:38:06 xmascheck Exp xmascheck $'
: 'fixes are tracked on www.in-ulm.de/~mascheck/various/whatshell/'

LC_ALL=C; export LC_ALL
: 'trivial cases first, yet parseable for historic shells'
case $BASH_VERSION in *.*) { echo "bash $BASH_VERSION";exit;};;esac
case $ZSH_VERSION  in *.*) { echo "zsh $ZSH_VERSION";exit;};;esac
case "$VERSION" in *zsh*) { echo "$VERSION";exit;};;esac
case  "$SH_VERSION" in *PD*) { echo "$SH_VERSION";exit;};;esac
case "$KSH_VERSION" in *PD*|*MIRBSD*) { echo "$KSH_VERSION";exit;};;esac
case "$POSH_VERSION" in 0.[1234]|0.[1234].*) \
     { echo "posh $POSH_VERSION, possibly slightly newer, yet<0.5";exit;}
  ;; *.*|*POSH*) { echo "posh $POSH_VERSION";exit;};; esac
case $YASH_VERSION in *.*) { echo "yash $YASH_VERSION";exit;};;esac

: 'traditional Bourne shell'
(eval ': $(:)') 2>/dev/null || {
  case `(:^times) 2>&1` in *0m*):;;
    *)p=' (and pipe check for Bourne shell failed)';;esac
  : 'pre-SVR2: no functions, no echo built-in.'
  (eval 'f(){ echo :; };f') >/dev/null 2>&1 || {
    ( eval '# :' ) 2>/dev/null || { echo '7th edition Bourne shell'"$p";exit;}
    ( : ${var:=value} ) 2>/dev/null ||
    { echo '7th edition Bourne shell, # comments (BSD, or port)'"$p";exit;}
    set x x; shift 2;test "$#" != 0 && { echo 'System III Bourne shell'"$p";exit;}
    { echo 'SVR1 Bourne shell'"$p";exit;}
  }
}; : 'keep syntactical block small for pre-SVR2'

myex(){ echo "$@";exit;} # "exec echo" might call the external command

(eval ': $(:)') 2>/dev/null || {
  (set -m; set +m) 2>/dev/null && {
    priv=0;(priv work)>/dev/null 2>&1 &&
      case `(priv work)2>&1` in *built*|*found*) priv=1;;esac
    read_r=0;(echo|read -r dummy 2>/dev/null) && read_r=1
    a_read=0;unset var;set -a;read var <&-;case `export` in
       *var*) a_read=1;;esac
    case_in=0;(eval 'case x in in) :;;esac')2>/dev/null && case_in=1
    ux=0;a=`(notexistent_cmd) 2>&1`; case $a in *UX*) ux=1;;esac
    case $priv$ux$read_r$a_read$case_in in
       11110) myex 'SVR4.2 MP2 Bourne shell'
    ;; 11010) myex 'SVR4.2 Bourne shell'
    ;; 10010|01010) myex 'SVR4.x Bourne shell (between 4.0 and 4.2)'
    ;; 00111) myex 'SVR4 Bourne shell (SunOS 5 schily variant, before 2016-02-02)'
    ;; 00101) myex 'SVR4 Bourne shell (SunOS 5 heirloom variant)'
    ;; 00001) myex 'SVR4 Bourne shell (SunOS 5 variant)'
    ;; 00000) myex 'SVR4.0 Bourne shell'
    ;; *)     myex 'unknown SVR4 Bourne shell variant' ;;esac
  }
  r=0; case `(read) 2>&1` in *"missing arguments"*) r=1;;esac
  g=0; (set -- -x; getopts x var) 2>/dev/null && g=1
  case $r$g in
     11) myex 'SVR3 Bourne shell'
  ;; 10) myex 'SVR3 Bourne shell (but getopts built-in is missing)'
  ;; 01) myex 'SVR3 Bourne shell (but read built-in does not match)'
  ;; 00) (builtin :) >/dev/null 2>&1 &&
 	myex '8th edition (SVR2) Bourne shell'"$p"
 	(type :) >/dev/null 2>&1 && myex 'SVR2 Bourne shell'"$p" ||
 	myex 'SVR2 shell (but type built-in is missing)'"$p"
  ;;esac
}

case $( (:^times) 2>&1) in *0m*)
  case `eval '(echo $((1+1))) 2>/dev/null'` in
    2) myex 'SVR4 Bourne shell (SunOS 5 schily variant, posix-like, since 2016-05-24)'
  ;;*) myex 'SVR4 Bourne shell (SunOS 5 schily variant, since 2016-02-02, before 2016-05-24)'
  ;;esac
;;esac

type -F >/dev/null 2>&1 &&
  myex 'SVR4 Bourne shell (SunOS 5 schily variant, since 2016-08-08, in posix mode)'

# Almquist shell aka ash
(typeset -i var) 2>/dev/null || {
  case $SHELLVERS in "ash 0.2") myex 'original ash';;esac
  test "$1" = "debug" && debug=1
  n=1; case `(! :) 2>&1` in *not*) n=0;;esac
  b=1; case `echo \`:\` ` in '`:`') b=0;;esac
  g=0; { set -- -x; getopts x: var
         case $OPTIND in 2) g=1;;esac;} >/dev/null 2>&1
  p=0; (eval ': ${var#value}') 2>/dev/null && p=1
  r=0; ( (read</dev/null)) 2>/dev/null; case $? in 0|1|2)
	  var=`(read</dev/null)2>&1`; case $var in *arg*) r=1;;esac
	;;esac
  v=1; set x; case $10 in x0) v=0;;esac
  t=0; (PATH=;type :) >/dev/null 2>&1 && t=1
  test -z "$debug" || echo debug '$n$b$g$p$r$v$t: ' $n$b$g$p$r$v$t
  case $n$b$g$p$r$v$t in
     00*) myex 'early ash (4.3BSD, 386BSD 0.0-p0.2.3/NetBSD 0.8)'
  ;; 010*) myex 'early ash (ash-0.2 port, Slackware 2.1-8.0,'\
	'386BSD p0.2.4, NetBSD 0.9)'
  ;; 1110100) myex 'early ash (Minix 2.x-3.1.2)'
  ;; 1000000) myex 'early ash (4.4BSD Alpha)'
  ;; 1100000) myex 'early ash (4.4BSD)'
  ;; 11001*) myex 'early ash (4.4BSD Lite, early NetBSD 1.x, BSD/OS 2.x)'
  ;; 1101100) myex 'early ash (4.4BSD Lite2, BSD/OS 3 ff)'
  ;; 1101101) myex 'ash (FreeBSD -10.x, Cygwin pre-1.7, Minix 3.1.3 ff)'
  ;; 1111101) myex 'ash (FreeBSD 11.0 ff)'
  ;; esac
  e=0; case `(PATH=;exp 0)2>&1` in 0) e=1;;esac
  n=0; case y in [^x]) n=1;;esac
  r=1; case `(PATH=;noexist 2>/dev/null) 2>&1` in
        *not*) r=0 ;; *file*) r=2 ;;esac
  f=0; case `eval 'for i in x;{ echo $i;}' 2>/dev/null` in x) f=1;;esac
  test -z "$debug" || echo debug '$e$n$r$a$f: ' $e$n$r$a$f
  case $e$n$r$f in
     1100) myex 'ash (dash 0.3.8-30 - 0.4.6)'
  ;; 1110) myex 'ash (dash 0.4.7 - 0.4.25)'
  ;; 1010) myex 'ash (dash 0.4.26 - 0.5.2)'
  ;; 0120|1120|0100) myex 'ash (Busybox 0.x)'
  ;; 0110) myex 'ash (Busybox 1.x)'
  ;;esac
  a=0; case `eval 'x=1;(echo $((x)) )2>/dev/null'` in 1) a=1;;esac
  x=0; case `f(){ echo $?;};false;f` in 1) x=1;;esac
  c=0; case `echo -e '\x'` in *\\x) c=1;;esac
  test -z "$debug" || echo debug '$e$n$r$f$a$x$c: ' $e$n$r$f$a$x$c
  case $e$n$r$f$a$x$c in
     1001010) myex 'ash (Slackware 8.1 ff, dash 0.3.7-11 - 0.3.7-14)'
  ;; 10010??) myex 'ash (dash 0.3-1 - 0.3.7-10, NetBSD 1.2 - 3.1/4.0)'
  ;; 10011*)  myex 'ash (NetBSD 3.1/4.0 ff)'
  ;; 00101*)  myex 'ash (dash 0.5.5.1 ff)'
  ;; 00100*)  myex 'ash (dash 0.5.3-0.5.5)'
  ;;      *)  myex 'unknown ash'
  ;;esac
}

savedbg=$! # save unused $! for a later check

# Korn shell ksh93, $KSH_VERSION not implemented before 93t'
# protected: fatal substitution error in non-ksh
( eval 'test "x${.sh.version}" != x' ) 2>/dev/null &
wait $! && { eval 'PATH=;case $(XtInitialize 2>&1) in Usage*)
    DTKSH=" (dtksh/CDE variant)";;esac
    myex "ksh93 ${.sh.version}${DTKSH}"'; }

# Korn shell ksh86/88
_XPG=1;test "`typeset -Z2 x=0; echo $x`" = '00' && {
  case `print -- 2>&1` in *"bad option"*)
    myex 'ksh86 Version 06/03/86(/a)';; esac
  test "$savedbg" = '0'&& myex 'ksh88 Version (..-)11/16/88 (1st release)'
  test ${x-"{a}"b} = '{ab}' && myex 'ksh88 Version (..-)11/16/88a'
  case "`for i in . .; do echo ${i[@]} ;done 2>&1`" in
    "subscript out of range"*)
    myex 'ksh88 Version (..-)11/16/88b or c' ;; esac
  test "`whence -v true`" = 'true is an exported alias for :' &&
    myex 'ksh88 Version (..-)11/16/88d'
  test "`(cd /dev/null 2>/dev/null; echo $?)`" != '1' &&
    myex 'ksh88 Version (..-)11/16/88e'
  test "`(: $(</file/notexistent); echo x) 2>/dev/null`" = '' &&
    myex 'ksh88 Version (..-)11/16/88f'
   case `([[ "-b" > "-a" ]]) 2>&1` in *"bad number"*) \
    myex 'ksh88 Version (..-)11/16/88g';;esac # fixed in OSR5euc
  test "`cd /dev;cd -P ..;pwd 2>&1`" != '/' &&
    myex 'ksh88 Version (..-)11/16/88g' # fixed in OSR5euc
  test "`f(){ typeset REPLY;echo|read;}; echo dummy|read; f;
     echo $REPLY`" = "" && myex 'ksh88 Version (..-)11/16/88h'
  test $(( 010 )) = 8 &&
    myex 'ksh88 Version (..-)11/16/88i (posix octal base)'
  myex 'ksh88 Version (..-)11/16/88i'
}

echo 'UNKNOWN'
]

}


# FUNCTION
# check_environment: Query GRASS environment for some important variables.
check_environment () {
	
	# Determine/report shell capabilities
	interpreter=`get_interpreter`
	g.message -i "Running in '$interpreter'."
	is_bash=0
	is_bourne=0
	is_bash=`${ECHO} ${interpreter} |${GREP} "bash" -c`
	is_bourne=`${ECHO} ${interpreter} |${GREP} "Bourne" -c`
	if [ $is_bash -eq 0 ] ; then
		if [ $is_bourne -eq 1 ] ; then
			g.message -w "Running in slow Bourne shell compatibility mode."
			g.message -w "For better performance, try running this script in Bash explicitly."
		else
			g.message -w "Could not assert that the current interpreter is Bash or Bourne shell."
			g.message -w "If this script throws inexplicable errors, try running it in Bash."
			g.message -w "Running in slow Bourne shell compatibility mode."
		fi
	else
		if [ -z $BASH_VERSION ] ; then
			# If BASH_VERSION has not been set then we just assume a version!
			BASH_VERSION="3" # Version 3 is the latest one shipped on macOS
			g.message -w "BASH_VERSION not set. Assuming version $BASH_VERSION."
		fi
	fi
	
	# Get essential GRASS environment settings
	GISDBASE=`g.gisenv get=GISDBASE`
	LOCATION_NAME=`g.gisenv get=LOCATION_NAME`
	MAPSET=`g.gisenv get=MAPSET`
	
	# Set GRASS verbosity (no --q or --v given):
	if [ -z "$GRASS_VERBOSE" ] ; then
		GRASS_VERBOSE=1
	fi
	
	# Get current region settings.
	eval `g.region -p -g`	

	# Store projection (to differentiate x/y and lat/lon)
	GRASS_REG_PROJECTION="${projection}"
	if [ "${GRASS_REG_PROJECTION}" = "3" ] ; then
		g.message -w "Running in lat/lon mode. Expect reduced performance."
	fi

}


check_params () {	
	# Flag '-i' requires option "where=".
		if [ ${GIS_FLAG_I} -eq 1 ] && [ -z "${GIS_OPT_WHERE}" ] ; then
		g.message -e "Flag '-i(invert selection)' is only useful if option 'where=' is also provided."
		exit ${EXIT_ERROR}
	fi
	
	# Value for 'dist=' must be >= 0.0
	check_value=`"${ECHO}" "${GIS_OPT_DIST}" | "${GREP}" -Ei '[+0-9]' | "${GREP}" -Eiv '[-]'`
	if [ -z "$check_value" ] ; then
		g.message -e "Option 'dist=' must be set to a value of 0 or larger."
		exit ${EXIT_ERROR}		
	fi
}


# FUNCTION
# check_input: Check input data for validity. ORDER MATTERS!
check_input () {	
	# Check that input vector map has chosen layer.
	eval `v.info -e map="${GIS_OPT_INPUT}" | "${GREP}" "num_dblinks="`
	check_error "Failed to get basic info for chosen layer of input vector map."
	if [ -z ${num_dblinks} ] ; then
		exit_error "Failed to get basic info for chosen layer of input vector map."
	fi
	if [ ${num_dblinks} -lt ${GIS_OPT_LAYER} ] ; then
		exit_error "Chosen layer (${GIS_OPT_LAYER}) does not exist in input vector map."
	fi
	eval `v.info -t map="${GIS_OPT_INPUT}" layer="${GIS_OPT_LAYER}"`
	check_error "Failed to get topology info for chosen layer of input vector map."
	if [ ${points} -lt 1 ] ; then
		exit_error "No points found in chosen layer of input vector map."
	fi
	if [ ${points} -lt 2 ] ; then
		exit_error "Less than two points found in chosen layer of input vector map."
	fi
	if [ ${points} -ne ${primitives} ] ; then
		exit_error "Input map must contain only points."
	fi
}


# FUNCTION
# MAIN():	This is a bogus function. It exists only so that text
#			editors will find this as a mark when parsing the source
#		   	code in SH mode, and it will be added to the document outline. 
MAIN () {
	"${ECHO}" ""
}

########
# MAIN #
########

# Keep track of starting time.
START=`"${DATE}"`

# Check GRASS environment:
check_environment

# Go!
if [ ${GRASS_VERBOSE} -gt 2 ] ; then
	g.message -i "$MODULE_NAME_EXEC ($MODULE_VERSION) started."
fi

# Run all pre-flight checks:
check_setup

# Check parametrization for plausibility:
check_params

# Check input map for validity:
check_input

# GO! GO!

# Main algorithm:
#
# INITIALIZE
# - copy entire input map to map COPY
# - (build list of protected cats if required)
# - in random mode: pick random point with valid cat
#		rand_int 1 10
# - in ordered mode: pick point with lowest cat value
#
# 1. Extract picked point:
#    - Copy picked point from COPY into new map EXTRACT (v.extract)
# 
# 2. Check if the current point has neighbours within scanning distance:
#		v.distance
#		(number of lines returned must be > 2)
#   
# 3. If YES, then delete all neighbours within scanning distance from COPY --
#    UNLESS it is the same as the picked point; AND
#    UNLESS they are on list of protected cats (or ONLY if so, when -i flag set)!
#
# 4. REPEAT
#      - in random mode: pick next point from COPY that has not yet been picked; goto step 1
#      - in ordered mode: find next-highest, valid cat value; goto step 1
#    UNTIL
#      - in random mode: all points in COPY are on the list that have already been picked
#      - in ordered mode: there is no next point in COPY
#
# RESULT
# - rename COPY to OUTPUT (overwrite existing)

# Create temporary copy of input map:
g.copy vect="${GIS_OPT_INPUT}","${TMP_VECT_COPY}" --o --quiet 2>/dev/null
check_error "Failed to create temporary copy of input map '${GIS_OPT_INPUT}'."

# Get GRASS primary key field:
cmd=`v.info -e map="${GIS_OPT_INPUT}" layer="${GIS_OPT_LAYER}"`
check_error "Failed to query input vector map '${GIS_OPT_INPUT}' for extended metadata."
eval_ws_safe "${cmd}" "attribute_primary_key"
if [ -z "${EVAL_RESULT}" ] ; then
		exit_error "Failed to retrieve name of GRASS primary key column for input vector map '${GIS_OPT_INPUT}'."
fi
primary_key_field="${EVAL_RESULT}"

# Extract all valid primary keys for the chosen layer of the input map.
# The '-f'(feature) flag makes sure that we only pick up records that have point geometry attached!
pkey_list=`v.db.select map="${GIS_OPT_INPUT}" layer="${GIS_OPT_LAYER}" columns="${primary_key_field}" -f -c --quiet`
check_error "Failed to retrieve primary keys of input map."
# Build sorted list of input map's primary key values.
# This is the list from which primary keys are picked to process the input features. 
# The actual sorting order depends on the value of $GIS_OPT_ORDER:
if [ "${GIS_OPT_ORDER}" = "pkeyasc" ] ; then
	sorted_pkey_list=`"${ECHO}" "${pkey_list}" | "${SORT}" -n 2>/dev/null`
fi
if [ "${GIS_OPT_ORDER}" = "pkeydesc" ] ; then
	sorted_pkey_list=`"${ECHO}" "${pkey_list}" | "${SORT}" -n -r 2>/dev/null`
fi
if [ "${GIS_OPT_ORDER}" = "random" ] ; then
	sorted_pkey_list=`"${ECHO}" "${pkey_list}" | "${SORT}" -n 2>/dev/null`
fi
check_error "Failed to sort list of primary key values for input vector map '${GIS_OPT_INPUT}'."


# Get length, minimum and maximum values for primary key lists:
# A) Sorted primary keys of input map:
list_len "${sorted_pkey_list}"
if [ -z "${LIST_LEN}" ] || [ ${LIST_LEN} -eq 0 ] ; then
	exit_error "Failed to create list of ordered primary keys."
fi
sorted_pkey_list_len=${LIST_LEN}
sorted_pkey_list_min=-1
sorted_pkey_list_max=-1
if [ "${GIS_OPT_ORDER}" = "pkeyasc" ] ; then
	list_get "${sorted_pkey_list}" 0 ${LIST_LEN}
	sorted_pkey_list_min=${LIST_ITEM}
	list_get "${sorted_pkey_list}" ${LIST_LEN} ${LIST_LEN}
	sorted_pkey_list_max=${LIST_ITEM}
fi
if [ "${GIS_OPT_ORDER}" = "pkeydesc" ] ; then
	list_get "${sorted_pkey_list}" 0 ${LIST_LEN}
	sorted_pkey_list_max=${LIST_ITEM}
	list_get "${sorted_pkey_list}" ${LIST_LEN} ${LIST_LEN}
	sorted_pkey_list_min=${LIST_ITEM}
fi
if [ "${GIS_OPT_ORDER}" = "random" ] ; then
	list_get "${sorted_pkey_list}" 0 ${LIST_LEN}
	sorted_pkey_list_min=${LIST_ITEM}
	list_get "${sorted_pkey_list}" ${LIST_LEN} ${LIST_LEN}
	sorted_pkey_list_max=${LIST_ITEM}
fi

# If BASHisms are allowed, then we also build an array representation of the key values,
# which can be used alternatively to speed up things: ITEM=${ARRAY[$IDX]}
if [ -n $BASH_VERSION ] ; then
	OLD_IFS="$IFS"
	IFS="${IFS_NEWLINE}"
	sorted_pkey_array=()
	for item in $sorted_pkey_list ; do
		sorted_pkey_array+=(${item})
	done
	IFS="$OLD_IFS"
fi

# B) Sorted protected keys ('where=' option):
# Build sorted list of (un)protected points if 'where=' is given:
sorted_protected_list=
sorted_protected_list_len=0
sorted_protected_list_min=-1
sorted_protected_list_max=-1
if [ -n "${GIS_OPT_WHERE}" ] ; then
	protected_list=`v.db.select map="${GIS_OPT_INPUT}" layer="${GIS_OPT_LAYER}" where="${GIS_OPT_WHERE}" columns="${primary_key_field}" -c --quiet`
	check_error "Failed to retrieve protected primary keys of input map."
	sorted_protected_list=`"${ECHO}" "${protected_list}" | "${SORT}" -n 2>/dev/null`
	check_error "Failed to sort list of protected primary key values for input vector map '${GIS_OPT_INPUT}'."	
	list_len "${sorted_protected_list}"
	if [ -z "${sorted_protected_list}" ] ; then
		g.message -w "Specified 'where=' option did not match any input data. No points protected from deletion."		
	else
		# Get statistics of protected keys list:
		sorted_protected_list_len=${LIST_LEN}
		list_get "${sorted_protected_list}" 0 ${LIST_LEN}
		sorted_protected_list_min=${LIST_ITEM}
		list_get "${sorted_protected_list}" ${LIST_LEN} ${LIST_LEN}
		sorted_protected_list_max=${LIST_ITEM}
	fi
fi

# Randomize list input elements (primary keys)?
if [ "${GIS_OPT_ORDER}" = "random" ] ; then
	if [ -z $SORT_RANDOM ] ; then
		# We need to use our own (slow) sorting function.
		g.message -w "System 'sort' command does not support randomization. This will be SLOW..."
		list_rand "$sorted_pkey_list"
	else
		# We can use the much more efficient '-R' option of 'sort'.
		sorted_pkey_list=`"${ECHO}" "${pkey_list}" | "${SORT}" -R 2>/dev/null`
	fi
fi

# Set first primary key.
# This depends on which 'order=' has been chosen.
if [ "${GIS_OPT_ORDER}" = "pkeyasc" ] || [ "${GIS_OPT_ORDER}" = "pkeydesc" ] || [ "${GIS_OPT_ORDER}" = "random" ] ; then
	CURRENT=0	# First key is simply first entry in list of primary keys (index=0)
fi

# Get info for attribute table connected to use-chosen layer (will be
# needed later, in the main loop):
get_tbl_info "${TMP_VECT_COPY}" ${GIS_OPT_LAYER}

# Main loop: Extract a point, scan its neighbourhood at a user-set distance
# and delete all other points that are within the scanning distance.
# We repeat this, until the STOP criterion is reached.
# What exactly that criterion is, depends on the user-set scanning order:
# pkey (default) = stop when all input points have been scanned, in order from
#                  lowest to highest primary key value.
# random = stop when the complete set N of randomly sampled point has been scanned
#
list_len "${pkey_list}"
num_points=${LIST_LEN}
if [ ${GRASS_VERBOSE} -gt 0 ] ; then
	g.message -i "Thinning ${num_points} points (order: '${GIS_OPT_ORDER}'):"
fi
STOP=0
while [ ${STOP} -lt 1 ] ; do
	#
	# Retrieve primary key value (depending on order mode):
	if [ "${GIS_OPT_ORDER}" = "pkeyasc" ] || [ "${GIS_OPT_ORDER}" = "pkeydesc" ] || [ "${GIS_OPT_ORDER}" = "random" ] ; then
		if [ -n $BASH_VERSION ] ; then
			LIST_ITEM=${sorted_pkey_array[$CURRENT]}
		else
			list_get "$sorted_pkey_list" ${CURRENT} ${sorted_pkey_list_len}
		fi
	fi
	PKEY_VALUE="${LIST_ITEM}" # From now on, we use $PKEY_VALUE to refer to the current primary key!
	if [ -z "${PKEY_VALUE}" ] ; then
		exit_error "Failed to retrieve primary key value in step #$CURRENT."
	fi
	
	# Extract current point into new temporary map:
	v.extract input="${GIS_OPT_INPUT}" layer="${GIS_OPT_LAYER}" type="point" cats="${PKEY_VALUE}" output="${TMP_VECT_EXTRACT}" --overwrite --quiet 2>/dev/null
	check_error "Failed to extract point with primary key value '${PKEY_VALUE}' from input vector map."
	# Measure distance of extracted point to all points of input map COPY:
	vdist_result=`v.distance from="${TMP_VECT_EXTRACT}" to="${TMP_VECT_COPY}" -p from_type="point" to_type="point" dmax="$GIS_OPT_DIST" upload="cat" separator="|" -a --quiet | ${TAIL} --lines=+3`
	check_error "Failed to measure distance from point with primary key value '${PKEY_VALUE}' to all points of input vector map."
	if [ -n "$vdist_result" ] ; then
		# Got one or more deletion candidate points
		OLD_IFS="$IFS"
		IFS="${IFS_NEWLINE}"
		# Process all candidates.
		for item in $vdist_result ; do
			pkey=`"${ECHO}" "${item}" | ${CUT} -d"|" -f3 `			
			pkey_protected=0
			# Check if primary key is on protected list (if 'where=' option given).
			if [ ${sorted_protected_list_len} -gt 0 ] ; then
				list_find_int_asc "${sorted_protected_list}" ${pkey}
				if [ -n "${LIST_ITEM}" ] ; then
					pkey_protected=1
				fi
			fi			
			# Check if feature still exists in temp output map, and if so, delete it:
			feature=`v.db.select map="${TMP_VECT_COPY}" layer="${GIS_OPT_LAYER}" columns="${primary_key_field}" where="${primary_key_field} = ${PKEY_VALUE}" -f -c --quiet`
			if [ -n "$feature" ] && [ ${pkey_protected} -eq 0 ]; then
				# Remove feature 1/2 (geometry):
				v.edit map="${TMP_VECT_COPY}" layer="${GIS_OPT_LAYER}" type="point" cats="${PKEY_VALUE}" tool="delete" --overwrite --quiet
				check_error "Failed to delete point geometry for primary key value '${PKEY_VALUE}' from temporary copy of input map."
				# Remove feature 2/2 (attribute record)
				# (note that $attribute_table and $attribute_database were set previously by 'get_tbl_info'):
				SQL="${DBMS_BEGIN}"
				SQL="$SQL
DELETE FROM $attribute_table WHERE ${primary_key_field} = ${PKEY_VALUE};"
				SQL="$SQL
${DBMS_COMMIT}"
				"${ECHO}" "${SQL}" | db.execute database="${attribute_database}" input="-"
				check_error "Failed to delete attribute record for primary key value '${PKEY_VALUE}' from temporary copy of input map."
			fi
		done
		IFS="$OLD_IFS"
	fi

	# Get next point around which to scan (again, how to do this depends
	# on the chosen order mode).
	if [ "${GIS_OPT_ORDER}" = "pkeyasc" ] || [ "${GIS_OPT_ORDER}" = "pkeydesc" ] || [ "${GIS_OPT_ORDER}" = "random" ] ; then
		# Just get next existing primary key value.
		if [ -n $BASH_VERSION ] ; then
			let CURRENT=${CURRENT}+1
		else
			CURRENT=`"${EXPR}" ${CURRENT} + 1`
		fi
	fi
		
	# Check whether we have reached the (mode-dependent) STOP criterion.
	if [ "${GIS_OPT_ORDER}" = "pkeyasc" ] ; then
		if [ ${PKEY_VALUE} -eq ${sorted_pkey_list_max} ] || [ -z "${PKEY_VALUE}" ] ; then
			STOP=1
		fi
	fi
	if [ "${GIS_OPT_ORDER}" = "pkeydesc" ] ; then
		if [ ${PKEY_VALUE} -eq ${sorted_pkey_list_min} ] || [ -z "${PKEY_VALUE}" ] ; then
			STOP=1
		fi
	fi
	if [ "${GIS_OPT_ORDER}" = "random" ] ; then
		if [ ${CURRENT} -eq ${num_points} ] || [ -z "${PKEY_VALUE}" ] ; then
			STOP=1
		fi
	fi
	
	# Update progress report.
	if [ ${GRASS_VERBOSE} -gt 0 ] ; then
		if [ "${GIS_OPT_ORDER}" = "pkeyasc" ] || [ "${GIS_OPT_ORDER}" = "pkeydesc" ] || [ "${GIS_OPT_ORDER}" = "random" ] ; then
			g.message -p "${CURRENT} ${num_points} 1"
		fi
	fi
	
done # END OF MAIN LOOP

# Create output map, simply by renaming temporary map:
g.rename vector="${TMP_VECT_COPY}","${GIS_OPT_OUTPUT}" --quiet --overwrite 2>/dev/null
check_error "Unable to create output map from temporary map."

# DONE!

# Remove temp. maps, restore region, etc.
clean_up

# Count number of points removed:
eval `v.info -t map="${GIS_OPT_OUTPUT}" layer="${GIS_OPT_LAYER}"`
check_error "Failed to get topology info for output vector map."
result=`"${EXPR}" ${num_points} - ${points}`
if [ -n "${result}" ] ; then
	if [ ${GRASS_VERBOSE} -gt 0 ] ; then
		g.message -i "Points removed: ${result}."
	fi
	if [ ${points} -eq 0 ] ; then
		g.message -w "No points removed."
	else
		if [ ${points} -lt 0 ] ; then
			exit_error "Number of points removed is negative."
		else
			if [ ${num_points} -lt ${points} ] ; then
				exit_error "Count of points removed exceeds number in input map."
			fi
		fi
	fi
else
	exit_error "Unable to determine number of points removed."
fi

# Show processing time.
if [ ${GRASS_VERBOSE} -gt 2 ] ; then
	g.message -i "Success."
	g.message -i "Started: ${START}"
	END=`"${DATE}"`
	g.message -i "Completed: ${END}"
fi

# Exit with status "OK"
exit ${EXIT_OK}
